(window.webpackJsonp=window.webpackJsonp||[]).push([[796],{1139:function(e,t,n){"use strict";var a=n(24),i=n(13),r=n(27),s=n(84),l=n(85),o=n(26),c=n(1145),m=n(86);i(i.S+i.F*!n(81)((function(e){Array.from(e)})),"Array",{from:function(e){var t,n,i,u,p=r(e),d="function"==typeof this?this:Array,f=arguments.length,h=f>1?arguments[1]:void 0,b=void 0!==h,g=0,v=m(p);if(b&&(h=a(h,f>2?arguments[2]:void 0,2)),null==v||d==Array&&l(v))for(n=new d(t=o(p.length));t>g;g++)c(n,g,b?h(p[g],g):p[g]);else for(u=v.call(p),n=new d;!(i=u.next()).done;g++)c(n,g,b?s(u,h,[i.value,g],!0):i.value);return n.length=g,n}})},1140:function(e,t,n){"use strict";var a=n(1146),i=n(1141);e.exports=n(1147)("Set",(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(e){return a.def(i(this,"Set"),e=0===e?0:e,e)}},a)},1141:function(e,t,n){var a=n(12);e.exports=function(e,t){if(!a(e)||e._t!==t)throw TypeError("Incompatible receiver, "+t+" required!");return e}},1142:function(e,t,n){"use strict";var a=n(0),i=n.n(a),r=n(1137),s=n(1136),l=n.n(s);n(131);t.a=function(e){var t=e.className,n=e.size,a=e.style,s=e.text;return i.a.createElement(r.a,{to:"/vic/",className:l()("vic","vic--"+n,t)},i.a.createElement("div",{className:"icon"},i.a.createElement("img",{src:"/img/vicmojis/vic"+a+".svg",alt:"Vic - The Vector Mascot"})),s&&i.a.createElement("div",{className:"text"},s))}},1144:function(e,t,n){"use strict";var a=n(0),i=n.n(a),r=(n(1137),n(1142));t.a=function(e){var t=e.text;return i.a.createElement("section",{className:"empty"},i.a.createElement(r.a,{style:"no",text:t}))}},1145:function(e,t,n){"use strict";var a=n(28),i=n(53);e.exports=function(e,t,n){t in e?a.f(e,t,i(0,n)):e[t]=n}},1146:function(e,t,n){"use strict";var a=n(28).f,i=n(82),r=n(80),s=n(24),l=n(78),o=n(79),c=n(54),m=n(83),u=n(87),p=n(10),d=n(1143).fastKey,f=n(1141),h=p?"_s":"size",b=function(e,t){var n,a=d(t);if("F"!==a)return e._i[a];for(n=e._f;n;n=n.n)if(n.k==t)return n};e.exports={getConstructor:function(e,t,n,c){var m=e((function(e,a){l(e,m,t,"_i"),e._t=t,e._i=i(null),e._f=void 0,e._l=void 0,e[h]=0,null!=a&&o(a,n,e[c],e)}));return r(m.prototype,{clear:function(){for(var e=f(this,t),n=e._i,a=e._f;a;a=a.n)a.r=!0,a.p&&(a.p=a.p.n=void 0),delete n[a.i];e._f=e._l=void 0,e[h]=0},delete:function(e){var n=f(this,t),a=b(n,e);if(a){var i=a.n,r=a.p;delete n._i[a.i],a.r=!0,r&&(r.n=i),i&&(i.p=r),n._f==a&&(n._f=i),n._l==a&&(n._l=r),n[h]--}return!!a},forEach:function(e){f(this,t);for(var n,a=s(e,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(a(n.v,n.k,this);n&&n.r;)n=n.p},has:function(e){return!!b(f(this,t),e)}}),p&&a(m.prototype,"size",{get:function(){return f(this,t)[h]}}),m},def:function(e,t,n){var a,i,r=b(e,t);return r?r.v=n:(e._l=r={i:i=d(t,!0),k:t,v:n,p:a=e._l,n:void 0,r:!1},e._f||(e._f=r),a&&(a.n=r),e[h]++,"F"!==i&&(e._i[i]=r)),e},getEntry:b,setStrong:function(e,t,n){c(e,t,(function(e,n){this._t=f(e,t),this._k=n,this._l=void 0}),(function(){for(var e=this._k,t=this._l;t&&t.r;)t=t.p;return this._t&&(this._l=t=t?t.n:this._t._f)?m(0,"keys"==e?t.k:"values"==e?t.v:[t.k,t.v]):(this._t=void 0,m(1))}),n?"entries":"values",!n,!0),u(t)}}},1147:function(e,t,n){"use strict";var a=n(5),i=n(13),r=n(15),s=n(80),l=n(1143),o=n(79),c=n(78),m=n(12),u=n(14),p=n(81),d=n(39),f=n(1148);e.exports=function(e,t,n,h,b,g){var v=a[e],y=v,_=b?"set":"add",w=y&&y.prototype,O={},j=function(e){var t=w[e];r(w,e,"delete"==e||"has"==e?function(e){return!(g&&!m(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return g&&!m(e)?void 0:t.call(this,0===e?0:e)}:"add"==e?function(e){return t.call(this,0===e?0:e),this}:function(e,n){return t.call(this,0===e?0:e,n),this})};if("function"==typeof y&&(g||w.forEach&&!u((function(){(new y).entries().next()})))){var x=new y,E=x[_](g?{}:-0,1)!=x,k=u((function(){x.has(1)})),N=p((function(e){new y(e)})),T=!g&&u((function(){for(var e=new y,t=5;t--;)e[_](t,t);return!e.has(-0)}));N||((y=t((function(t,n){c(t,y,e);var a=f(new v,t,y);return null!=n&&o(n,b,a[_],a),a}))).prototype=w,w.constructor=y),(k||T)&&(j("delete"),j("has"),b&&j("get")),(T||E)&&j(_),g&&w.clear&&delete w.clear}else y=h.getConstructor(t,e,b,_),s(y.prototype,n),l.NEED=!0;return d(y,e),O[e]=y,i(i.G+i.W+i.F*(y!=v),O),g||h.setStrong(y,e,b),y}},1148:function(e,t,n){var a=n(12),i=n(1149).set;e.exports=function(e,t,n){var r,s=t.constructor;return s!==n&&"function"==typeof s&&(r=s.prototype)!==n.prototype&&a(r)&&i&&i(e,r),e}},1149:function(e,t,n){var a=n(12),i=n(8),r=function(e,t){if(i(e),!a(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,a){try{(a=n(24)(Function.call,n(1163).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(i){t=!0}return function(e,n){return r(e,n),t?e.__proto__=n:a(e,n),e}}({},!1):void 0),check:r}},1150:function(e,t,n){"use strict";n(1140),n(77),n(1139),n(25),n(20),n(19),n(1138);var a=n(0),i=n.n(a),r=n(1157),s=n.n(r);t.a=function(e){var t=e.currentState,n=e.humanize,a=e.icon,r=e.name,l=e.setState,o=e.values;if(0==o.size)return null;var c=Array.from(o);return i.a.createElement(i.a.Fragment,null,c.map((function(e,o){var c="string"==typeof e&&n?s()(e):e;return i.a.createElement("label",{key:o},i.a.createElement("input",{checked:t.has(e),name:r,onChange:function(n){var a=new Set(t);n.currentTarget.checked?a.add(e):a.delete(e),l(a)},type:"checkbox"}),c&&i.a.createElement(i.a.Fragment,null,a?i.a.createElement("i",{className:"feather icon-"+a}):""," ",c))})))}},1153:function(e,t,n){"use strict";var a=n(13),i=n(1154),r=n(27),s=n(26),l=n(29),o=n(1166);a(a.P,"Array",{flatMap:function(e){var t,n,a=r(this);return l(e),t=s(a.length),n=o(a,0),i(n,a,a,t,0,1,e,arguments[1]),n}}),n(88)("flatMap")},1154:function(e,t,n){"use strict";var a=n(1165),i=n(12),r=n(26),s=n(24),l=n(2)("isConcatSpreadable");e.exports=function e(t,n,o,c,m,u,p,d){for(var f,h,b=m,g=0,v=!!p&&s(p,d,3);g<c;){if(g in o){if(f=v?v(o[g],g,n):o[g],h=!1,i(f)&&(h=void 0!==(h=f[l])?!!h:a(f)),h&&u>0)b=e(t,n,f,r(f.length),b,u-1)-1;else{if(b>=9007199254740991)throw TypeError();t[b]=f}b++}g++}return b}},1155:function(e,t,n){"use strict";n(1138),n(1151),n(1152),n(1139),n(1153),n(25),n(20),n(19),n(77),n(1140);var a=n(0),i=n.n(a),r=n(1150),s=n(1144),l=n(1158),o=n.n(l);t.a=function(e){var t=e.children,n=e.filters,l=Object(a.useState)(!1),c=l[0],m=l[1],u=Object(a.useState)(new Set),p=u[0],d=u[1],f=Object(a.useState)(!1),h=f[0],b=f[1],g=Object(a.useState)(null),v=g[0],y=g[1],_=[];t&&(_=Array.isArray(t)?t:[t]);var w=_.some((function(e){return e.props.common})),O=o()(_).flatMap((function(e){return e.props.groups})).uniq().value(),j=_.some((function(e){return e.props.required})),x=_;return c&&(x=x.filter((function(e){return e.props.common}))),p.size>0&&(x=x.filter((function(e){return Array.from(p).every((function(t){return e.props.groups.includes(t)}))}))),h&&(x=x.filter((function(e){return e.props.required}))),v&&(x=x.filter((function(e){return e.props.name.toLowerCase().includes(v.toLowerCase())}))),i.a.createElement(i.a.Fragment,null,_.length>1&&!1!==n?i.a.createElement("div",{className:"filters"},i.a.createElement("div",{className:"search"},i.a.createElement("span",{className:"search--result-count"},x.length," items"),i.a.createElement("input",{className:"input--text input--lg",type:"text",onChange:function(e){return y(e.currentTarget.value)},placeholder:"\ud83d\udd0d Search..."})),i.a.createElement("div",{className:"filter"},i.a.createElement("div",{className:"filter--choices"},i.a.createElement(r.a,{values:O,currentState:p,setState:d}),w&&i.a.createElement("label",{title:"Only show popular/common results"},i.a.createElement("input",{type:"checkbox",onChange:function(e){return m(e.currentTarget.checked)},checked:c}),"common"),j&&i.a.createElement("label",{title:"Only show required results"},i.a.createElement("input",{type:"checkbox",onChange:function(e){return b(e.currentTarget.checked)},checked:h}),"required")))):null,!Array.isArray(x)||x.length>0?i.a.createElement("ul",{className:"connected-list"},x):i.a.createElement(s.a,{text:"no components found"}))}},1156:function(e,t,n){"use strict";n(89),n(25),n(20),n(19),n(52),n(1138),n(1151),n(1152);var a=n(0),i=n.n(a),r=n(1136),s=n.n(r),l=(n(1128),n(1167));function o(e){return e.includes(".")?'"'+e+'"':e}function c(e){return"string"==typeof e&&e.includes("\n")?'"""\n'+e+'\n"""':JSON.stringify(e)}function m(e,t){return(n=t)&&n.constructor===Object?"name"in t&&"value"in t?o(t.name)+" = "+c(t.value):o(Object.keys(t)[0])+" = "+c(Object.values(t)[0]):e?o(e)+" = "+c(t):c(t);var n}function u(e){var t=e.values,n=[];if(Array.isArray(t))for(var a in t){var r=t[a];n.push(i.a.createElement("code",{key:r},c(r))),n.push(" ")}else for(var s in t)n.push(i.a.createElement("code",{key:s,className:"with-info-icon",title:t[s]},c(s))),n.push(" ");return n}function p(e){var t=e.name,n=e.path,a=e.values,r="";return a.forEach((function(e){n&&(r+=n+"."),r+=m(t,e)+"\n"})),i.a.createElement("div",null,i.a.createElement(l.a,{className:"language-toml"},r))}function d(e){var t=e.unit,n=e.value,a="";return t&&(a=i.a.createElement(i.a.Fragment,null," (",t,")")),i.a.createElement(i.a.Fragment,null,i.a.createElement("code",null,c(n)),a)}function f(e){var t=e.value,n=Object.keys(t)[0],a=Object.values(t)[0];return""==a&&(a=null),i.a.createElement("span",null,i.a.createElement("code",null,i.a.createElement("a",{href:"#"+n},n))," ","= ",i.a.createElement("code",null,c(a)))}function h(e){var t=e.defaultValue,n=e.enumValues,r=e.examples,s=(e.groups,e.name),l=e.path,o=e.relevantWhen,c=e.required,m=e.unit,h=e.warnings,b=Object(a.useState)(!1),g=b[0],v=b[1];return i.a.createElement("ul",{className:"info"},h&&h.length>0&&h.map((function(e,t){return i.a.createElement("li",{key:t,className:"warning"},i.a.createElement("i",{className:"feather icon-alert-triangle"})," WARNING:"," ",e.text)})),o&&i.a.createElement("li",null,"Only ",c?"required":"relevant"," when:"," ",i.a.createElement(f,{value:o})),void 0!==t?null!==t?i.a.createElement("li",null,"Default: ",i.a.createElement(d,{unit:m,value:t})):i.a.createElement("li",null,"No default"):null,n&&i.a.createElement("li",null,"Enum, must be one of: ",i.a.createElement(u,{values:n})),(r.length>1||r[0]!=t)&&i.a.createElement("li",null,i.a.createElement("div",{className:"show-more",onClick:function(){return v(!g)}},g?"Hide examples":"View examples"),g&&i.a.createElement(p,{name:s,path:l,values:r})))}t.a=function(e){var t=e.children,n=e.common,r=e.defaultValue,l=e.enumValues,o=e.examples,c=e.groups,m=e.name,u=e.path,p=e.relevantWhen,d=e.required,f=e.templateable,b=e.type,g=e.unit,v=e.warnings,y=Object(a.useState)(!1),_=y[0],w=(y[1],t);return _&&(w=w.filter((function(e){return"p"!=e.props.originalType}))),i.a.createElement("li",{className:s()({"field-required":d,"field-collapsed":_}),required:d},i.a.createElement("div",{className:"badges"},f&&i.a.createElement("span",{className:"badge badge--primary with-info-icon",title:"This option is dynamic and accepts the Vector template syntax"},"templateable"),b&&i.a.createElement("span",{className:"badge badge--secondary"},b,g&&i.a.createElement(i.a.Fragment,null," (",g,")")),l&&Object.keys(l).length>0&&i.a.createElement("span",{className:"badge badge--secondary with-info-icon",title:"This option is an enumation and only allows specific values"},"enum"),n&&i.a.createElement("span",{className:"badge badge--primary with-info-icon",title:"This is a popular that we recommend for getting started"},"common"),d?i.a.createElement("span",{className:"badge badge--danger"},"required",p&&"*"):i.a.createElement("span",{className:"badge badge--secondary"},"optional")),w,!_&&"table"!=b&&i.a.createElement(h,{defaultValue:r,enumValues:l,examples:o,groups:c,name:m,path:u,relevantWhen:p,required:d,unit:g,warnings:v}))}},955:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return m})),n.d(t,"metadata",(function(){return u})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return f}));var a=n(1),i=n(9),r=(n(0),n(1128)),s=n(1155),l=n(1156),o=n(1161),c=n(1160),m={last_modified_on:"2020-06-24",component_title:"Swimlanes",description:"The Vector `swimlanes` transform accepts and outputs `log` events, allowing you to route events across parallel streams using logical filters.",event_types:["log"],function_category:"route",issues_url:"https://github.com/timberio/vector/issues?q=is%3Aopen+is%3Aissue+label%3A%22transform%3A+swimlanes%22",operating_systems:["Linux","MacOS","Windows"],sidebar_label:'swimlanes|["log"]',source_url:"https://github.com/timberio/vector/tree/master/src/transforms/swimlanes.rs",status:"beta",title:"Swimlanes Transform",unsupported_operating_systems:[]},u={id:"reference/transforms/swimlanes",title:"Swimlanes Transform",description:"The Vector `swimlanes` transform accepts and outputs `log` events, allowing you to route events across parallel streams using logical filters.",source:"@site/docs/reference/transforms/swimlanes.md",permalink:"/docs/reference/transforms/swimlanes",editUrl:"https://github.com/timberio/vector/edit/master/website/docs/reference/transforms/swimlanes.md",sidebar_label:'swimlanes|["log"]',sidebar:"docs",previous:{title:"Split Transform",permalink:"/docs/reference/transforms/split"},next:{title:"Tag Cardinality Limit Transform",permalink:"/docs/reference/transforms/tag_cardinality_limit"}},p=[{value:"Configuration",id:"configuration",children:[{value:"lanes",id:"lanes",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"How It Works",id:"how-it-works",children:[{value:"Complex Processing",id:"complex-processing",children:[]},{value:"Environment Variables",id:"environment-variables",children:[]}]}],d={rightToc:p};function f(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"The Vector ",Object(r.b)("inlineCode",{parentName:"p"},"swimlanes")," transform\naccepts and outputs ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/about/data-model/log/"}),Object(r.b)("inlineCode",{parentName:"a"},"log"))," events, allowing you to route\nevents across parallel streams using logical filters."),Object(r.b)("h2",{id:"configuration"},"Configuration"),Object(r.b)(o.a,{block:!0,defaultValue:"common",values:[{label:"Common",value:"common"},{label:"Advanced",value:"advanced"}],mdxType:"Tabs"},Object(r.b)(c.a,{value:"common",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-toml",metastring:'title="vector.toml"',title:'"vector.toml"'}),'[transforms.my_transform_id]\n  # General\n  type = "swimlanes" # required\n  inputs = ["my-source-or-transform-id"] # required\n\n  # Lanes\n  [transforms.my_transform_id.lanes.`[swimlane-id]`]\n    type = "check_fields" # optional, default\n    "message.eq" = "this is the content to match against" # example\n    "message.eq" = ["match this", "or this"] # example\n    "message.contains" = "foo" # example\n    "message.contains" = ["foo", "bar"] # example\n    "environment.ends_with" = "-staging" # example\n    "environment.ends_with" = ["-staging", "-running"] # example\n    "message.regex" = " (any|of|these|five|words) " # example\n    "environment.starts_with" = "staging-" # example\n    "environment.starts_with" = ["staging-", "running-"] # example\n'))),Object(r.b)(c.a,{value:"advanced",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-toml",metastring:'title="vector.toml"',title:'"vector.toml"'}),'[transforms.my_transform_id]\n  # General\n  type = "swimlanes" # required\n  inputs = ["my-source-or-transform-id"] # required\n\n  # Lanes\n  [transforms.my_transform_id.lanes.`[swimlane-id]`]\n    type = "check_fields" # optional, default\n    "message.eq" = "this is the content to match against" # example\n    "message.eq" = ["match this", "or this"] # example\n    "host.exists" = true # example\n    "method.neq" = "POST" # example\n    "method.neq" = ["POST", "GET"] # example\n    "message.not_contains" = "some phrase to ignore" # example\n    "unit.not_starts_with" = "sys-" # example\n    "unit.not_ends_with" = ".device" # example\n    "message.contains" = "foo" # example\n    "message.contains" = ["foo", "bar"] # example\n    "environment.ends_with" = "-staging" # example\n    "environment.ends_with" = ["-staging", "-running"] # example\n    "message.ip_cidr_contains" = "10.0.0.0/8" # example\n    "message.ip_cidr_contains" = ["2000::/10", "192.168.0.0/16"] # example\n    "message.regex" = " (any|of|these|five|words) " # example\n    "environment.starts_with" = "staging-" # example\n    "environment.starts_with" = ["staging-", "running-"] # example\n')))),Object(r.b)(s.a,{filters:!0,mdxType:"Fields"},Object(r.b)(l.a,{common:!0,defaultValue:null,enumValues:null,examples:[],groups:[],name:"lanes",path:null,relevantWhen:null,required:!0,templateable:!1,type:"table",unit:null,warnings:[],mdxType:"Field"},Object(r.b)("h3",{id:"lanes"},"lanes"),Object(r.b)("p",null,"A table of swimlane identifiers to logical conditions representing the filter\nof the swimlane. Each swimlane can then be referenced as an input by other\ncomponents with the name ",Object(r.b)("inlineCode",{parentName:"p"},"<transform_name>.<swimlane_id>"),"."),Object(r.b)(s.a,{filters:!1,mdxType:"Fields"},Object(r.b)(l.a,{common:!0,defaultValue:null,enumValues:null,examples:[],groups:[],name:"`[swimlane-id]`",path:"lanes",relevantWhen:null,required:!0,templateable:!1,type:"table",unit:null,warnings:[],mdxType:"Field"},Object(r.b)("h4",{id:"swimlane-id"},Object(r.b)("inlineCode",{parentName:"h4"},"[swimlane-id]")),Object(r.b)("p",null,"The identifier of a swimlane."),Object(r.b)(s.a,{filters:!1,mdxType:"Fields"},Object(r.b)(l.a,{common:!0,defaultValue:"check_fields",enumValues:{check_fields:"Allows you to check individual fields against a list of conditions.",is_log:"Returns true if the event is a log.",is_metric:"Returns true if the event is a metric."},examples:["check_fields","is_log","is_metric"],groups:[],name:"type",path:"lanes.`[swimlane-id]`",relevantWhen:null,required:!1,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(r.b)("h5",{id:"type"},"type"),Object(r.b)("p",null,"The type of the condition to execute.")),Object(r.b)(l.a,{common:!0,defaultValue:null,enumValues:null,examples:[{"message.eq":"this is the content to match against"},{"message.eq":["match this","or this"]}],groups:[],name:"`[field-name]`.eq",path:"lanes.`[swimlane-id]`",relevantWhen:{type:"check_fields"},required:!1,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(r.b)("h5",{id:"field-nameeq"},Object(r.b)("inlineCode",{parentName:"h5"},"[field-name]"),".eq"),Object(r.b)("p",null,"Check whether a fields contents exactly matches the value specified. This may\nbe a single string or a list of strings, in which case this evaluates to true\nif any of the list matches.")),Object(r.b)(l.a,{common:!1,defaultValue:null,enumValues:null,examples:[{"host.exists":!0}],groups:[],name:"`[field-name]`.exists",path:"lanes.`[swimlane-id]`",relevantWhen:{type:"check_fields"},required:!1,templateable:!1,type:"bool",unit:null,warnings:[],mdxType:"Field"},Object(r.b)("h5",{id:"field-nameexists"},Object(r.b)("inlineCode",{parentName:"h5"},"[field-name]"),".exists"),Object(r.b)("p",null,"Check whether a field exists or does not exist, depending on the provided value\nbeing ",Object(r.b)("inlineCode",{parentName:"p"},"true")," or ",Object(r.b)("inlineCode",{parentName:"p"},"false")," respectively.")),Object(r.b)(l.a,{common:!1,defaultValue:null,enumValues:null,examples:[{"method.neq":"POST"},{"method.neq":["POST","GET"]}],groups:[],name:"`[field-name]`.neq",path:"lanes.`[swimlane-id]`",relevantWhen:{type:"check_fields"},required:!1,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(r.b)("h5",{id:"field-nameneq"},Object(r.b)("inlineCode",{parentName:"h5"},"[field-name]"),".neq"),Object(r.b)("p",null,"Check whether a fields contents does not match the value specified. This may be\na single string or a list of strings, in which case this evaluates to false if\nany of the list matches.")),Object(r.b)(l.a,{common:!1,defaultValue:null,enumValues:null,examples:[{"message.not_contains":"some phrase to ignore"},{"unit.not_starts_with":"sys-"},{"unit.not_ends_with":".device"}],groups:[],name:"`[field-name]`.not_`[condition]`",path:"lanes.`[swimlane-id]`",relevantWhen:{type:"check_fields"},required:!1,templateable:!1,type:"any",unit:null,warnings:[],mdxType:"Field"},Object(r.b)("h5",{id:"field-namenot_condition"},Object(r.b)("inlineCode",{parentName:"h5"},"[field-name]"),".not_",Object(r.b)("inlineCode",{parentName:"h5"},"[condition]")),Object(r.b)("p",null,"Check if the given ",Object(r.b)("inlineCode",{parentName:"p"},"[condition]")," does not match.")),Object(r.b)(l.a,{common:!0,defaultValue:null,enumValues:null,examples:[{"message.contains":"foo"},{"message.contains":["foo","bar"]}],groups:[],name:"`[field_name]`.contains",path:"lanes.`[swimlane-id]`",relevantWhen:{type:"check_fields"},required:!1,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(r.b)("h5",{id:"field_namecontains"},Object(r.b)("inlineCode",{parentName:"h5"},"[field_name]"),".contains"),Object(r.b)("p",null,"Checks whether a string field contains a string argument. This may be a single\nstring or a list of strings, in which case this evaluates to true if any of the\nlist matches.")),Object(r.b)(l.a,{common:!0,defaultValue:null,enumValues:null,examples:[{"environment.ends_with":"-staging"},{"environment.ends_with":["-staging","-running"]}],groups:[],name:"`[field_name]`.ends_with",path:"lanes.`[swimlane-id]`",relevantWhen:{type:"check_fields"},required:!1,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(r.b)("h5",{id:"field_nameends_with"},Object(r.b)("inlineCode",{parentName:"h5"},"[field_name]"),".ends_with"),Object(r.b)("p",null,"Checks whether a string field ends with a string argument. This may be a single\nstring or a list of strings, in which case this evaluates to true if any of the\nlist matches.")),Object(r.b)(l.a,{common:!1,defaultValue:null,enumValues:null,examples:[{"message.ip_cidr_contains":"10.0.0.0/8"},{"message.ip_cidr_contains":["2000::/10","192.168.0.0/16"]}],groups:[],name:"`[field_name]`.ip_cidr_contains",path:"lanes.`[swimlane-id]`",relevantWhen:{type:"check_fields"},required:!1,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(r.b)("h5",{id:"field_nameip_cidr_contains"},Object(r.b)("inlineCode",{parentName:"h5"},"[field_name]"),".ip_cidr_contains"),Object(r.b)("p",null,"Checks whether an IP field is contained within a given ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing"}),"IP CIDR"),"\n(works with IPv4 and IPv6). This may be a single string or a list of strings,\nin which case this evaluates to true if the IP field is contained within any of\nthe CIDRs in the list.")),Object(r.b)(l.a,{common:!0,defaultValue:null,enumValues:null,examples:[{"message.regex":" (any|of|these|five|words) "}],groups:[],name:"`[field_name]`.regex",path:"lanes.`[swimlane-id]`",relevantWhen:{type:"check_fields"},required:!1,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(r.b)("h5",{id:"field_nameregex"},Object(r.b)("inlineCode",{parentName:"h5"},"[field_name]"),".regex"),Object(r.b)("p",null,"Checks whether a string field matches a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Regular_expression"}),"regular expression"),".\nVector uses the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.rs/regex/1.3.6/regex/#syntax"}),"documented Rust Regex syntax"),". Note\nthat this condition is considerably more expensive than a regular string match\n(such as ",Object(r.b)("inlineCode",{parentName:"p"},"starts_with")," or ",Object(r.b)("inlineCode",{parentName:"p"},"contains"),") so the use of those conditions are\npreferred where possible.")),Object(r.b)(l.a,{common:!0,defaultValue:null,enumValues:null,examples:[{"environment.starts_with":"staging-"},{"environment.starts_with":["staging-","running-"]}],groups:[],name:"`[field_name]`.starts_with",path:"lanes.`[swimlane-id]`",relevantWhen:{type:"check_fields"},required:!1,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(r.b)("h5",{id:"field_namestarts_with"},Object(r.b)("inlineCode",{parentName:"h5"},"[field_name]"),".starts_with"),Object(r.b)("p",null,"Checks whether a string field starts with a string argument. This may be a\nsingle string or a list of strings, in which case this evaluates to true if any\nof the list matches."))))))),Object(r.b)("h2",{id:"examples"},"Examples"),Object(r.b)(o.a,{block:!0,defaultValue:"ifelse",select:!1,values:[{label:"If/Else",value:"ifelse"},{label:"Splitting",value:"splitting"}],mdxType:"Tabs"},Object(r.b)(c.a,{value:"ifelse",mdxType:"TabItem"},Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"swimlanes")," transform, in it's simplest form, can act as a simple if/else stream splitter. For example, we can route events from the host ",Object(r.b)("inlineCode",{parentName:"p"},"gerry")," to a sink ",Object(r.b)("inlineCode",{parentName:"p"},"only_loves_gerry"),", and all other events to a sink ",Object(r.b)("inlineCode",{parentName:"p"},"hates_gerry"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-toml",metastring:'title="vector.toml"',title:'"vector.toml"'}),'[transforms.splitting_gerrys]\n  inputs = [ "somewhere" ]\n  type = "swimlanes"\n\n  [transforms.splitting_gerrys.lanes.only_gerrys]\n    type = "check_fields"\n    "host.eq" = "gerry"\n\n  [transforms.splitting_gerrys.lanes.no_gerrys]\n    type = "check_fields"\n    "host.neq" = "gerry"\n\n[sinks.only_loves_gerry]\n  inputs = [ "splitting_gerrys.only_gerrys" ]\n  type = "something"\n\n[sinks.hates_gerry]\n  inputs = [ "splitting_gerrys.no_gerrys" ]\n  type = "something_else"\n')),Object(r.b)("p",null,"This syntax makes it easy to create arbitrary numbers of swimlanes, each with their own logic, and easily route them to downstream components.")),Object(r.b)(c.a,{value:"splitting",mdxType:"TabItem"},Object(r.b)("p",null,"To follow up with the previous ",Object(r.b)("inlineCode",{parentName:"p"},"If/Else")," example, let's say we want to split a log stream based on all of the log ",Object(r.b)("inlineCode",{parentName:"p"},"level")," values:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-toml",metastring:'title="vector.toml"',title:'"vector.toml"'}),'[transforms.level_splitter]\n  type = "swimlanes"\n\n  [transforms.level_splitter.lanes.debug_events]\n    type = "check_fields"\n    "level.eq" = "debug"\n\n  [transforms.level_splitter.lanes.info_events]\n    type = "check_fields"\n    "level.eq" = "info"\n\n  [transforms.level_splitter.lanes.warn_events]\n    type = "check_fields"\n    "level.eq" = "warn"\n\n  [transforms.level_splitter.lanes.error_events]\n    type = "check_fields"\n    "level.eq" = "error"\n\n[sinks.info_printer]\n  type = "console"\n  inputs = ["level_splitter.info_events"]\n  target = "stdout"\n\n[sinks.error_printer]\n  type = "console"\n  inputs = ["level_splitter.error_events"]\n  target = "stderr"\n\n# Add more sinks or transforms that use the `debug_events` and `warn_events`\n# streams\n')),Object(r.b)("p",null,"Notice how we must define mutually exclusive conditions for each ",Object(r.b)("inlineCode",{parentName:"p"},"level")," value. If a log ",Object(r.b)("inlineCode",{parentName:"p"},"level")," does not match any of the lanes it will be dropped."))),Object(r.b)("h2",{id:"how-it-works"},"How It Works"),Object(r.b)("h3",{id:"complex-processing"},"Complex Processing"),Object(r.b)("p",null,"If you encounter limitations with the ",Object(r.b)("inlineCode",{parentName:"p"},"swimlanes"),"\ntransform then we recommend using a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://vector.dev/components/?functions%5B%5D=program"}),"runtime transform"),".\nThese transforms are designed for complex processing and give you the power of\nfull programming runtime."),Object(r.b)("h3",{id:"environment-variables"},"Environment Variables"),Object(r.b)("p",null,"Environment variables are supported through all of Vector's configuration.\nSimply add ",Object(r.b)("inlineCode",{parentName:"p"},"${MY_ENV_VAR}")," in your Vector configuration file and the variable\nwill be replaced before being evaluated."),Object(r.b)("p",null,"You can learn more in the\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/setup/configuration/#environment-variables"}),"Environment Variables")," section."))}f.isMDXComponent=!0}}]);