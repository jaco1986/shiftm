(window.webpackJsonp=window.webpackJsonp||[]).push([[362],{1129:function(e,t,n){"use strict";var a=n(24),i=n(13),l=n(27),r=n(84),s=n(85),o=n(26),u=n(1135),c=n(86);i(i.S+i.F*!n(81)((function(e){Array.from(e)})),"Array",{from:function(e){var t,n,i,m,p=l(e),d="function"==typeof this?this:Array,h=arguments.length,f=h>1?arguments[1]:void 0,b=void 0!==f,g=0,v=c(p);if(b&&(f=a(f,h>2?arguments[2]:void 0,2)),null==v||d==Array&&s(v))for(n=new d(t=o(p.length));t>g;g++)u(n,g,b?f(p[g],g):p[g]);else for(m=v.call(p),n=new d;!(i=m.next()).done;g++)u(n,g,b?r(m,f,[i.value,g],!0):i.value);return n.length=g,n}})},1130:function(e,t,n){"use strict";var a=n(1136),i=n(1131);e.exports=n(1137)("Set",(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(e){return a.def(i(this,"Set"),e=0===e?0:e,e)}},a)},1131:function(e,t,n){var a=n(12);e.exports=function(e,t){if(!a(e)||e._t!==t)throw TypeError("Incompatible receiver, "+t+" required!");return e}},1132:function(e,t,n){"use strict";var a=n(0),i=n.n(a),l=n(1127),r=n(1126),s=n.n(r);n(131);t.a=function(e){var t=e.className,n=e.size,a=e.style,r=e.text;return i.a.createElement(l.a,{to:"/vic/",className:s()("vic","vic--"+n,t)},i.a.createElement("div",{className:"icon"},i.a.createElement("img",{src:"/img/vicmojis/vic"+a+".svg",alt:"Vic - The Vector Mascot"})),r&&i.a.createElement("div",{className:"text"},r))}},1134:function(e,t,n){"use strict";var a=n(0),i=n.n(a),l=(n(1127),n(1132));t.a=function(e){var t=e.text;return i.a.createElement("section",{className:"empty"},i.a.createElement(l.a,{style:"no",text:t}))}},1135:function(e,t,n){"use strict";var a=n(28),i=n(53);e.exports=function(e,t,n){t in e?a.f(e,t,i(0,n)):e[t]=n}},1136:function(e,t,n){"use strict";var a=n(28).f,i=n(82),l=n(80),r=n(24),s=n(78),o=n(79),u=n(54),c=n(83),m=n(87),p=n(10),d=n(1133).fastKey,h=n(1131),f=p?"_s":"size",b=function(e,t){var n,a=d(t);if("F"!==a)return e._i[a];for(n=e._f;n;n=n.n)if(n.k==t)return n};e.exports={getConstructor:function(e,t,n,u){var c=e((function(e,a){s(e,c,t,"_i"),e._t=t,e._i=i(null),e._f=void 0,e._l=void 0,e[f]=0,null!=a&&o(a,n,e[u],e)}));return l(c.prototype,{clear:function(){for(var e=h(this,t),n=e._i,a=e._f;a;a=a.n)a.r=!0,a.p&&(a.p=a.p.n=void 0),delete n[a.i];e._f=e._l=void 0,e[f]=0},delete:function(e){var n=h(this,t),a=b(n,e);if(a){var i=a.n,l=a.p;delete n._i[a.i],a.r=!0,l&&(l.n=i),i&&(i.p=l),n._f==a&&(n._f=i),n._l==a&&(n._l=l),n[f]--}return!!a},forEach:function(e){h(this,t);for(var n,a=r(e,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(a(n.v,n.k,this);n&&n.r;)n=n.p},has:function(e){return!!b(h(this,t),e)}}),p&&a(c.prototype,"size",{get:function(){return h(this,t)[f]}}),c},def:function(e,t,n){var a,i,l=b(e,t);return l?l.v=n:(e._l=l={i:i=d(t,!0),k:t,v:n,p:a=e._l,n:void 0,r:!1},e._f||(e._f=l),a&&(a.n=l),e[f]++,"F"!==i&&(e._i[i]=l)),e},getEntry:b,setStrong:function(e,t,n){u(e,t,(function(e,n){this._t=h(e,t),this._k=n,this._l=void 0}),(function(){for(var e=this._k,t=this._l;t&&t.r;)t=t.p;return this._t&&(this._l=t=t?t.n:this._t._f)?c(0,"keys"==e?t.k:"values"==e?t.v:[t.k,t.v]):(this._t=void 0,c(1))}),n?"entries":"values",!n,!0),m(t)}}},1137:function(e,t,n){"use strict";var a=n(5),i=n(13),l=n(15),r=n(80),s=n(1133),o=n(79),u=n(78),c=n(12),m=n(14),p=n(81),d=n(40),h=n(1138);e.exports=function(e,t,n,f,b,g){var v=a[e],y=v,O=b?"set":"add",_=y&&y.prototype,x={},j=function(e){var t=_[e];l(_,e,"delete"==e||"has"==e?function(e){return!(g&&!c(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return g&&!c(e)?void 0:t.call(this,0===e?0:e)}:"add"==e?function(e){return t.call(this,0===e?0:e),this}:function(e,n){return t.call(this,0===e?0:e,n),this})};if("function"==typeof y&&(g||_.forEach&&!m((function(){(new y).entries().next()})))){var w=new y,T=w[O](g?{}:-0,1)!=w,q=m((function(){w.has(1)})),V=p((function(e){new y(e)})),E=!g&&m((function(){for(var e=new y,t=5;t--;)e[O](t,t);return!e.has(-0)}));V||((y=t((function(t,n){u(t,y,e);var a=h(new v,t,y);return null!=n&&o(n,b,a[O],a),a}))).prototype=_,_.constructor=y),(q||E)&&(j("delete"),j("has"),b&&j("get")),(E||T)&&j(O),g&&_.clear&&delete _.clear}else y=f.getConstructor(t,e,b,O),r(y.prototype,n),s.NEED=!0;return d(y,e),x[e]=y,i(i.G+i.W+i.F*(y!=v),x),g||f.setStrong(y,e,b),y}},1138:function(e,t,n){var a=n(12),i=n(1139).set;e.exports=function(e,t,n){var l,r=t.constructor;return r!==n&&"function"==typeof r&&(l=r.prototype)!==n.prototype&&a(l)&&i&&i(e,l),e}},1139:function(e,t,n){var a=n(12),i=n(8),l=function(e,t){if(i(e),!a(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,a){try{(a=n(24)(Function.call,n(1156).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(i){t=!0}return function(e,n){return l(e,n),t?e.__proto__=n:a(e,n),e}}({},!1):void 0),check:l}},1140:function(e,t,n){"use strict";n(1130),n(77),n(1129),n(25),n(20),n(19),n(1128);var a=n(0),i=n.n(a),l=n(1149),r=n.n(l);t.a=function(e){var t=e.currentState,n=e.humanize,a=e.icon,l=e.name,s=e.setState,o=e.values;if(0==o.size)return null;var u=Array.from(o);return i.a.createElement(i.a.Fragment,null,u.map((function(e,o){var u="string"==typeof e&&n?r()(e):e;return i.a.createElement("label",{key:o},i.a.createElement("input",{checked:t.has(e),name:l,onChange:function(n){var a=new Set(t);n.currentTarget.checked?a.add(e):a.delete(e),s(a)},type:"checkbox"}),u&&i.a.createElement(i.a.Fragment,null,a?i.a.createElement("i",{className:"feather icon-"+a}):""," ",u))})))}},1143:function(e,t,n){"use strict";var a=n(13),i=n(1144),l=n(27),r=n(26),s=n(29),o=n(1159);a(a.P,"Array",{flatMap:function(e){var t,n,a=l(this);return s(e),t=r(a.length),n=o(a,0),i(n,a,a,t,0,1,e,arguments[1]),n}}),n(88)("flatMap")},1144:function(e,t,n){"use strict";var a=n(1158),i=n(12),l=n(26),r=n(24),s=n(2)("isConcatSpreadable");e.exports=function e(t,n,o,u,c,m,p,d){for(var h,f,b=c,g=0,v=!!p&&r(p,d,3);g<u;){if(g in o){if(h=v?v(o[g],g,n):o[g],f=!1,i(h)&&(f=void 0!==(f=h[s])?!!f:a(h)),f&&m>0)b=e(t,n,h,l(h.length),b,m-1)-1;else{if(b>=9007199254740991)throw TypeError();t[b]=h}b++}g++}return b}},1147:function(e,t,n){"use strict";n(1128),n(1141),n(1142),n(1129),n(1143),n(25),n(20),n(19),n(77),n(1130);var a=n(0),i=n.n(a),l=n(1140),r=n(1134),s=n(1151),o=n.n(s);t.a=function(e){var t=e.children,n=e.filters,s=Object(a.useState)(!1),u=s[0],c=s[1],m=Object(a.useState)(new Set),p=m[0],d=m[1],h=Object(a.useState)(!1),f=h[0],b=h[1],g=Object(a.useState)(null),v=g[0],y=g[1],O=[];t&&(O=Array.isArray(t)?t:[t]);var _=O.some((function(e){return e.props.common})),x=o()(O).flatMap((function(e){return e.props.groups})).uniq().value(),j=O.some((function(e){return e.props.required})),w=O;return u&&(w=w.filter((function(e){return e.props.common}))),p.size>0&&(w=w.filter((function(e){return Array.from(p).every((function(t){return e.props.groups.includes(t)}))}))),f&&(w=w.filter((function(e){return e.props.required}))),v&&(w=w.filter((function(e){return e.props.name.toLowerCase().includes(v.toLowerCase())}))),i.a.createElement(i.a.Fragment,null,O.length>1&&!1!==n?i.a.createElement("div",{className:"filters"},i.a.createElement("div",{className:"search"},i.a.createElement("span",{className:"search--result-count"},w.length," items"),i.a.createElement("input",{className:"input--text input--lg",type:"text",onChange:function(e){return y(e.currentTarget.value)},placeholder:"\ud83d\udd0d Search..."})),i.a.createElement("div",{className:"filter"},i.a.createElement("div",{className:"filter--choices"},i.a.createElement(l.a,{values:x,currentState:p,setState:d}),_&&i.a.createElement("label",{title:"Only show popular/common results"},i.a.createElement("input",{type:"checkbox",onChange:function(e){return c(e.currentTarget.checked)},checked:u}),"common"),j&&i.a.createElement("label",{title:"Only show required results"},i.a.createElement("input",{type:"checkbox",onChange:function(e){return b(e.currentTarget.checked)},checked:f}),"required")))):null,!Array.isArray(w)||w.length>0?i.a.createElement("ul",{className:"connected-list"},w):i.a.createElement(r.a,{text:"no components found"}))}},1148:function(e,t,n){"use strict";n(89),n(25),n(20),n(19),n(52),n(1128),n(1141),n(1142);var a=n(0),i=n.n(a),l=n(1126),r=n.n(l),s=(n(1118),n(1160));function o(e){return e.includes(".")?'"'+e+'"':e}function u(e){return"string"==typeof e&&e.includes("\n")?'"""\n'+e+'\n"""':JSON.stringify(e)}function c(e,t){return(n=t)&&n.constructor===Object?"name"in t&&"value"in t?o(t.name)+" = "+u(t.value):o(Object.keys(t)[0])+" = "+u(Object.values(t)[0]):e?o(e)+" = "+u(t):u(t);var n}function m(e){var t=e.values,n=[];if(Array.isArray(t))for(var a in t){var l=t[a];n.push(i.a.createElement("code",{key:l},u(l))),n.push(" ")}else for(var r in t)n.push(i.a.createElement("code",{key:r,className:"with-info-icon",title:t[r]},u(r))),n.push(" ");return n}function p(e){var t=e.name,n=e.path,a=e.values,l="";return a.forEach((function(e){n&&(l+=n+"."),l+=c(t,e)+"\n"})),i.a.createElement("div",null,i.a.createElement(s.a,{className:"language-toml"},l))}function d(e){var t=e.unit,n=e.value,a="";return t&&(a=i.a.createElement(i.a.Fragment,null," (",t,")")),i.a.createElement(i.a.Fragment,null,i.a.createElement("code",null,u(n)),a)}function h(e){var t=e.value,n=Object.keys(t)[0],a=Object.values(t)[0];return""==a&&(a=null),i.a.createElement("span",null,i.a.createElement("code",null,i.a.createElement("a",{href:"#"+n},n))," ","= ",i.a.createElement("code",null,u(a)))}function f(e){var t=e.defaultValue,n=e.enumValues,l=e.examples,r=(e.groups,e.name),s=e.path,o=e.relevantWhen,u=e.required,c=e.unit,f=e.warnings,b=Object(a.useState)(!1),g=b[0],v=b[1];return i.a.createElement("ul",{className:"info"},f&&f.length>0&&f.map((function(e,t){return i.a.createElement("li",{key:t,className:"warning"},i.a.createElement("i",{className:"feather icon-alert-triangle"})," WARNING:"," ",e.text)})),o&&i.a.createElement("li",null,"Only ",u?"required":"relevant"," when:"," ",i.a.createElement(h,{value:o})),void 0!==t?null!==t?i.a.createElement("li",null,"Default: ",i.a.createElement(d,{unit:c,value:t})):i.a.createElement("li",null,"No default"):null,n&&i.a.createElement("li",null,"Enum, must be one of: ",i.a.createElement(m,{values:n})),(l.length>1||l[0]!=t)&&i.a.createElement("li",null,i.a.createElement("div",{className:"show-more",onClick:function(){return v(!g)}},g?"Hide examples":"View examples"),g&&i.a.createElement(p,{name:r,path:s,values:l})))}t.a=function(e){var t=e.children,n=e.common,l=e.defaultValue,s=e.enumValues,o=e.examples,u=e.groups,c=e.name,m=e.path,p=e.relevantWhen,d=e.required,h=e.templateable,b=e.type,g=e.unit,v=e.warnings,y=Object(a.useState)(!1),O=y[0],_=(y[1],t);return O&&(_=_.filter((function(e){return"p"!=e.props.originalType}))),i.a.createElement("li",{className:r()({"field-required":d,"field-collapsed":O}),required:d},i.a.createElement("div",{className:"badges"},h&&i.a.createElement("span",{className:"badge badge--primary with-info-icon",title:"This option is dynamic and accepts the Vector template syntax"},"templateable"),b&&i.a.createElement("span",{className:"badge badge--secondary"},b,g&&i.a.createElement(i.a.Fragment,null," (",g,")")),s&&Object.keys(s).length>0&&i.a.createElement("span",{className:"badge badge--secondary with-info-icon",title:"This option is an enumation and only allows specific values"},"enum"),n&&i.a.createElement("span",{className:"badge badge--primary with-info-icon",title:"This is a popular that we recommend for getting started"},"common"),d?i.a.createElement("span",{className:"badge badge--danger"},"required",p&&"*"):i.a.createElement("span",{className:"badge badge--secondary"},"optional")),_,!O&&"table"!=b&&i.a.createElement(f,{defaultValue:l,enumValues:s,examples:o,groups:u,name:c,path:m,relevantWhen:p,required:d,unit:g,warnings:v}))}},517:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return u})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return m})),n.d(t,"default",(function(){return d}));var a=n(1),i=(n(0),n(1118)),l=n(1147),r=n(1148),s=n(1153),o=n(1152);const u={last_modified_on:"2020-06-24",title:"Unit Tests",description:"Vector's unit test configuration options, allowing you to unit test your Vector configuration files.",status:"beta"},c={id:"reference/tests",title:"Unit Tests",description:"Vector's unit test configuration options, allowing you to unit test your Vector configuration files.",source:"@site/docs/reference/tests.md",permalink:"/docs/reference/tests"},m=[{value:"Configuration",id:"configuration",children:[{value:"inputs",id:"inputs",children:[]},{value:"name",id:"name-1",children:[]},{value:"no_outputs_from",id:"no_outputs_from",children:[]},{value:"outputs",id:"outputs",children:[]}]}],p={rightToc:m};function d({components:e,...t}){return Object(i.b)("wrapper",Object(a.a)({},p,t,{components:e,mdxType:"MDXLayout"}),Object(i.b)("p",null,"It's possible to define unit tests within a Vector configuration file that cover\na network of transforms within the topology. The intention of these tests is to\nimprove the maintainability of configs containing larger and more complex\ncombinations of transforms."),Object(i.b)("p",null,"Executing tests within a config file can be done with the ",Object(i.b)("inlineCode",{parentName:"p"},"test")," subcommand:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"vector test /etc/vector/*.toml\n")),Object(i.b)("h2",{id:"configuration"},"Configuration"),Object(i.b)(s.a,{block:!0,defaultValue:"common",values:[{label:"Common",value:"common"},{label:"Advanced",value:"advanced"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"common",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-toml",metastring:'title="vector.toml"',title:'"vector.toml"'}),'[transforms.foo]\n  type = "regex_parser"\n  regex = "^(?P<timestamp>[\\\\w\\\\-:\\\\+]+) (?P<level>\\\\w+) (?P<message>.*)$"\n\n[[tests]]\n  # Inputs\n  [[tests.inputs]]\n    insert_at = "foo" # required\n    type = "raw" # required\n    value = "some message contents" # required, required when type = "raw"\n\n  # General\n  name = "foo test" # required\n\n  # Outputs\n  [[tests.outputs]]\n    # Conditions\n    conditions.type = "check_fields" # optional, default\n    conditions."message.eq" = "this is the content to match against" # example\n    conditions."message.eq" = ["match this", "or this"] # example\n    conditions."message.contains" = "foo" # example\n    conditions."message.contains" = ["foo", "bar"] # example\n    conditions."environment.ends_with" = "-staging" # example\n    conditions."environment.ends_with" = ["-staging", "-running"] # example\n    conditions."message.regex" = " (any|of|these|five|words) " # example\n    conditions."environment.starts_with" = "staging-" # example\n    conditions."environment.starts_with" = ["staging-", "running-"] # example\n\n    # General\n    extract_from = "foo" # required\n'))),Object(i.b)(o.a,{value:"advanced",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-toml",metastring:'title="vector.toml"',title:'"vector.toml"'}),'[transforms.foo]\n  type = "regex_parser"\n  regex = "^(?P<timestamp>[\\\\w\\\\-:\\\\+]+) (?P<level>\\\\w+) (?P<message>.*)$"\n\n[[tests]]\n  # Inputs\n  [[tests.inputs]]\n    # General\n    insert_at = "foo" # required\n    type = "raw" # required\n    value = "some message contents" # required, required when type = "raw"\n\n    # Log fields\n    log_fields.message = "some message contents" # example\n    log_fields.host = "myhost" # example\n\n    # Metric\n    # General\n    metric.direction = "plus" # optional, no default\n    metric.name = "duration_total" # required\n    metric.sample_rate = 1 # optional, no default\n    metric.timestamp = "2019-11-01T21:15:47.443232Z" # required\n    metric.type = "counter" # required\n    metric.val = 10.2 # required\n\n    # Tags\n    metric.tags.host = "foohost" # example\n    metric.tags.region = "us-east-1" # example\n\n  # General\n  name = "foo test" # required\n  no_outputs_from = ["foo"] # required\n\n  # Outputs\n  [[tests.outputs]]\n    # Conditions\n    conditions.type = "check_fields" # optional, default\n    conditions."message.eq" = "this is the content to match against" # example\n    conditions."message.eq" = ["match this", "or this"] # example\n    conditions."host.exists" = true # example\n    conditions."method.neq" = "POST" # example\n    conditions."method.neq" = ["POST", "GET"] # example\n    conditions."message.not_contains" = "some phrase to ignore" # example\n    conditions."unit.not_starts_with" = "sys-" # example\n    conditions."unit.not_ends_with" = ".device" # example\n    conditions."message.contains" = "foo" # example\n    conditions."message.contains" = ["foo", "bar"] # example\n    conditions."environment.ends_with" = "-staging" # example\n    conditions."environment.ends_with" = ["-staging", "-running"] # example\n    conditions."message.ip_cidr_contains" = "10.0.0.0/8" # example\n    conditions."message.ip_cidr_contains" = ["2000::/10", "192.168.0.0/16"] # example\n    conditions."message.regex" = " (any|of|these|five|words) " # example\n    conditions."environment.starts_with" = "staging-" # example\n    conditions."environment.starts_with" = ["staging-", "running-"] # example\n\n    # General\n    extract_from = "foo" # required\n')))),Object(i.b)("p",null,"For more information about unit tests check out ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/guides/advanced/unit-testing/"}),"this guide"),"."),Object(i.b)(l.a,{filters:!0,mdxType:"Fields"},Object(i.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[],groups:[],name:"inputs",path:null,relevantWhen:null,required:!0,templateable:!1,type:"[table]",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h3",{id:"inputs"},"inputs"),Object(i.b)("p",null,"A table that defines a unit test input event."),Object(i.b)(l.a,{filters:!1,mdxType:"Fields"},Object(i.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:["foo"],groups:[],name:"insert_at",path:"inputs",relevantWhen:null,required:!0,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h4",{id:"insert_at"},"insert_at"),Object(i.b)("p",null,"The name of a transform, the input event will be delivered to this transform in\norder to begin the test.")),Object(i.b)(r.a,{common:!1,defaultValue:null,enumValues:null,examples:[],groups:[],name:"log_fields",path:"inputs",relevantWhen:{type:"log"},required:!0,templateable:!1,type:"table",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h4",{id:"log_fields"},"log_fields"),Object(i.b)("p",null,"Specifies the log fields when the input type is 'log'."),Object(i.b)(l.a,{filters:!1,mdxType:"Fields"},Object(i.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[{message:"some message contents"},{host:"myhost"}],groups:[],name:"`[field-name]`",path:"inputs.log_fields",relevantWhen:null,required:!0,templateable:!1,type:"*",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h5",{id:"field-name"},Object(i.b)("inlineCode",{parentName:"h5"},"[field-name]")),Object(i.b)("p",null,"A key/value pair representing a field to be added to the input event.")))),Object(i.b)(r.a,{common:!1,defaultValue:null,enumValues:null,examples:[],groups:[],name:"metric",path:"inputs",relevantWhen:{type:"metric"},required:!0,templateable:!1,type:"table",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h4",{id:"metric"},"metric"),Object(i.b)("p",null,"Specifies the metric type when the input type is 'metric'."),Object(i.b)(l.a,{filters:!1,mdxType:"Fields"},Object(i.b)(r.a,{common:!1,defaultValue:null,enumValues:{plus:"Increase the gauge",minus:"Decrease the gauge"},examples:["plus","minus"],groups:[],name:"direction",path:"inputs.metric",relevantWhen:null,required:!1,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h5",{id:"direction"},"direction"),Object(i.b)("p",null,"The direction to increase or decrease the gauge value.")),Object(i.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:["duration_total"],groups:[],name:"name",path:"inputs.metric",relevantWhen:null,required:!0,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h5",{id:"name"},"name"),Object(i.b)("p",null,"The name of the metric. Defaults to ",Object(i.b)("inlineCode",{parentName:"p"},"<field>_total")," for ",Object(i.b)("inlineCode",{parentName:"p"},"counter")," and ",Object(i.b)("inlineCode",{parentName:"p"},"<field>"),"\nfor ",Object(i.b)("inlineCode",{parentName:"p"},"gauge"),".")),Object(i.b)(r.a,{common:!1,defaultValue:null,enumValues:null,examples:[1],groups:[],name:"sample_rate",path:"inputs.metric",relevantWhen:null,required:!1,templateable:!1,type:"float",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h5",{id:"sample_rate"},"sample_rate"),Object(i.b)("p",null,"The bucket/distribution the metric is a part of.")),Object(i.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[],groups:[],name:"tags",path:"inputs.metric",relevantWhen:null,required:!1,templateable:!1,type:"table",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h5",{id:"tags"},"tags"),Object(i.b)("p",null,"Key/value pairs representing ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/about/data-model/metric/#tags"}),"metric tags"),"."),Object(i.b)(l.a,{filters:!1,mdxType:"Fields"},Object(i.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[{host:"foohost"},{region:"us-east-1"}],groups:[],name:"`[tag-name]`",path:"inputs.metric.tags",relevantWhen:null,required:!0,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h6",{id:"tag-name"},Object(i.b)("inlineCode",{parentName:"h6"},"[tag-name]")),Object(i.b)("p",null,"Key/value pairs representing ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/about/data-model/metric/#tags"}),"metric tags"),".")))),Object(i.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:["2019-11-01T21:15:47.443232Z"],groups:[],name:"timestamp",path:"inputs.metric",relevantWhen:null,required:!0,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h5",{id:"timestamp"},"timestamp"),Object(i.b)("p",null,"Time metric was created/ingested.")),Object(i.b)(r.a,{common:!0,defaultValue:null,enumValues:{counter:"A [counter metric type][docs.data-model.metric#counter].",gauge:"A [gauge metric type][docs.data-model.metric#gauge].",histogram:"A [distribution metric type][docs.data-model.metric#distribution].",set:"A [set metric type][docs.data-model.metric#set]."},examples:["counter","gauge","histogram","set"],groups:[],name:"type",path:"inputs.metric",relevantWhen:null,required:!0,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h5",{id:"type"},"type"),Object(i.b)("p",null,"The metric type.")),Object(i.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[10.2],groups:[],name:"val",path:"inputs.metric",relevantWhen:null,required:!0,templateable:!1,type:"float",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h5",{id:"val"},"val"),Object(i.b)("p",null,"Amount to increment/decrement or gauge.")))),Object(i.b)(r.a,{common:!0,defaultValue:null,enumValues:{raw:"Creates a log event where the message contents are specified in the field 'value'.",log:"Creates a log event where log fields are specified in the table 'log_fields'.",metric:"Creates a metric event, where its type and fields are specified in the table 'metric'."},examples:["raw","log","metric"],groups:[],name:"type",path:"inputs",relevantWhen:null,required:!0,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h4",{id:"type-1"},"type"),Object(i.b)("p",null,"The event type.")),Object(i.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:["some message contents"],groups:[],name:"value",path:"inputs",relevantWhen:{type:"raw"},required:!0,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h4",{id:"value"},"value"),Object(i.b)("p",null,"Specifies the log message field contents when the input type is 'raw'.")))),Object(i.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:["foo test"],groups:[],name:"name",path:null,relevantWhen:null,required:!0,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h3",{id:"name-1"},"name"),Object(i.b)("p",null,"A unique identifier for this test.")),Object(i.b)(r.a,{common:!1,defaultValue:null,enumValues:null,examples:[["foo"]],groups:[],name:"no_outputs_from",path:null,relevantWhen:null,required:!0,templateable:!1,type:"[string]",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h3",{id:"no_outputs_from"},"no_outputs_from"),Object(i.b)("p",null,"A list of transforms that must NOT output events in order for the test to pass.")),Object(i.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[],groups:[],name:"outputs",path:null,relevantWhen:null,required:!0,templateable:!1,type:"[table]",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h3",{id:"outputs"},"outputs"),Object(i.b)("p",null,"A table that defines a unit test expected output."),Object(i.b)(l.a,{filters:!1,mdxType:"Fields"},Object(i.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[],groups:[],name:"conditions",path:"outputs",relevantWhen:null,required:!1,templateable:!1,type:"[table]",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h4",{id:"conditions"},"conditions"),Object(i.b)("p",null,"A table that defines a collection of conditions to check against the output of\na transform. A test is considered to have passed when each condition has\nresolved true for one or more events extracted from the target transform.An\nexpected output without conditions instead prints the input and output of a\ntarget without checking its values."),Object(i.b)(l.a,{filters:!1,mdxType:"Fields"},Object(i.b)(r.a,{common:!0,defaultValue:"check_fields",enumValues:{check_fields:"Allows you to check individual fields against a list of conditions.",is_log:"Returns true if the event is a log.",is_metric:"Returns true if the event is a metric."},examples:["check_fields","is_log","is_metric"],groups:[],name:"type",path:"outputs.conditions",relevantWhen:null,required:!1,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h5",{id:"type-2"},"type"),Object(i.b)("p",null,"The type of the condition to execute.")),Object(i.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[{"message.eq":"this is the content to match against"},{"message.eq":["match this","or this"]}],groups:[],name:"`[field-name]`.eq",path:"outputs.conditions",relevantWhen:{type:"check_fields"},required:!1,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h5",{id:"field-nameeq"},Object(i.b)("inlineCode",{parentName:"h5"},"[field-name]"),".eq"),Object(i.b)("p",null,"Check whether a fields contents exactly matches the value specified. This may\nbe a single string or a list of strings, in which case this evaluates to true\nif any of the list matches.")),Object(i.b)(r.a,{common:!1,defaultValue:null,enumValues:null,examples:[{"host.exists":!0}],groups:[],name:"`[field-name]`.exists",path:"outputs.conditions",relevantWhen:{type:"check_fields"},required:!1,templateable:!1,type:"bool",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h5",{id:"field-nameexists"},Object(i.b)("inlineCode",{parentName:"h5"},"[field-name]"),".exists"),Object(i.b)("p",null,"Check whether a field exists or does not exist, depending on the provided value\nbeing ",Object(i.b)("inlineCode",{parentName:"p"},"true")," or ",Object(i.b)("inlineCode",{parentName:"p"},"false")," respectively.")),Object(i.b)(r.a,{common:!1,defaultValue:null,enumValues:null,examples:[{"method.neq":"POST"},{"method.neq":["POST","GET"]}],groups:[],name:"`[field-name]`.neq",path:"outputs.conditions",relevantWhen:{type:"check_fields"},required:!1,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h5",{id:"field-nameneq"},Object(i.b)("inlineCode",{parentName:"h5"},"[field-name]"),".neq"),Object(i.b)("p",null,"Check whether a fields contents does not match the value specified. This may be\na single string or a list of strings, in which case this evaluates to false if\nany of the list matches.")),Object(i.b)(r.a,{common:!1,defaultValue:null,enumValues:null,examples:[{"message.not_contains":"some phrase to ignore"},{"unit.not_starts_with":"sys-"},{"unit.not_ends_with":".device"}],groups:[],name:"`[field-name]`.not_`[condition]`",path:"outputs.conditions",relevantWhen:{type:"check_fields"},required:!1,templateable:!1,type:"any",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h5",{id:"field-namenot_condition"},Object(i.b)("inlineCode",{parentName:"h5"},"[field-name]"),".not_",Object(i.b)("inlineCode",{parentName:"h5"},"[condition]")),Object(i.b)("p",null,"Check if the given ",Object(i.b)("inlineCode",{parentName:"p"},"[condition]")," does not match.")),Object(i.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[{"message.contains":"foo"},{"message.contains":["foo","bar"]}],groups:[],name:"`[field_name]`.contains",path:"outputs.conditions",relevantWhen:{type:"check_fields"},required:!1,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h5",{id:"field_namecontains"},Object(i.b)("inlineCode",{parentName:"h5"},"[field_name]"),".contains"),Object(i.b)("p",null,"Checks whether a string field contains a string argument. This may be a single\nstring or a list of strings, in which case this evaluates to true if any of the\nlist matches.")),Object(i.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[{"environment.ends_with":"-staging"},{"environment.ends_with":["-staging","-running"]}],groups:[],name:"`[field_name]`.ends_with",path:"outputs.conditions",relevantWhen:{type:"check_fields"},required:!1,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h5",{id:"field_nameends_with"},Object(i.b)("inlineCode",{parentName:"h5"},"[field_name]"),".ends_with"),Object(i.b)("p",null,"Checks whether a string field ends with a string argument. This may be a single\nstring or a list of strings, in which case this evaluates to true if any of the\nlist matches.")),Object(i.b)(r.a,{common:!1,defaultValue:null,enumValues:null,examples:[{"message.ip_cidr_contains":"10.0.0.0/8"},{"message.ip_cidr_contains":["2000::/10","192.168.0.0/16"]}],groups:[],name:"`[field_name]`.ip_cidr_contains",path:"outputs.conditions",relevantWhen:{type:"check_fields"},required:!1,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h5",{id:"field_nameip_cidr_contains"},Object(i.b)("inlineCode",{parentName:"h5"},"[field_name]"),".ip_cidr_contains"),Object(i.b)("p",null,"Checks whether an IP field is contained within a given ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing"}),"IP CIDR"),"\n(works with IPv4 and IPv6). This may be a single string or a list of strings,\nin which case this evaluates to true if the IP field is contained within any of\nthe CIDRs in the list.")),Object(i.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[{"message.regex":" (any|of|these|five|words) "}],groups:[],name:"`[field_name]`.regex",path:"outputs.conditions",relevantWhen:{type:"check_fields"},required:!1,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h5",{id:"field_nameregex"},Object(i.b)("inlineCode",{parentName:"h5"},"[field_name]"),".regex"),Object(i.b)("p",null,"Checks whether a string field matches a ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Regular_expression"}),"regular expression"),".\nVector uses the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.rs/regex/1.3.6/regex/#syntax"}),"documented Rust Regex syntax"),". Note\nthat this condition is considerably more expensive than a regular string match\n(such as ",Object(i.b)("inlineCode",{parentName:"p"},"starts_with")," or ",Object(i.b)("inlineCode",{parentName:"p"},"contains"),") so the use of those conditions are\npreferred where possible.")),Object(i.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[{"environment.starts_with":"staging-"},{"environment.starts_with":["staging-","running-"]}],groups:[],name:"`[field_name]`.starts_with",path:"outputs.conditions",relevantWhen:{type:"check_fields"},required:!1,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h5",{id:"field_namestarts_with"},Object(i.b)("inlineCode",{parentName:"h5"},"[field_name]"),".starts_with"),Object(i.b)("p",null,"Checks whether a string field starts with a string argument. This may be a\nsingle string or a list of strings, in which case this evaluates to true if any\nof the list matches.")))),Object(i.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:["foo"],groups:[],name:"extract_from",path:"outputs",relevantWhen:null,required:!0,templateable:!1,type:"string",unit:null,warnings:[],mdxType:"Field"},Object(i.b)("h4",{id:"extract_from"},"extract_from"),Object(i.b)("p",null,"The name of a transform, at the end of the test events extracted from this\ntransform will be checked against a table of conditions."))))))}d.isMDXComponent=!0}}]);