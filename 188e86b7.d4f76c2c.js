(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{248:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return b})),n.d(t,"metadata",(function(){return d})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return m}));var o=n(1),i=n(9),a=(n(0),n(1128)),r=n(1172),l=n(1169),c=n(1134),s=n(1131),b={last_modified_on:"2020-04-01",$schema:"/.meta/.schemas/guides.json",title:"Hello World. Your First Vector Pipeline.",description:'Building your very first Vector pipeline, the "Hello World" of Vector tutorials.',series_position:1,author_github:"https://github.com/Jeffail",tags:["type: tutorial","domain: config"]},d={categories:[{name:"getting-started",title:"Getting Started",description:"Take Vector from zero to production in under 10 minutes.",permalink:"/guides/getting-started"}],coverLabel:"Hello World. Your First Vector Pipeline.",description:'Building your very first Vector pipeline, the "Hello World" of Vector tutorials.',permalink:"/guides/getting-started/your-first-pipeline",readingTime:"3 min read",seriesPosition:1,source:"@site/guides/getting-started/your-first-pipeline.md",tags:[{label:"type: tutorial",permalink:"/guides/tags/type-tutorial"},{label:"domain: config",permalink:"/guides/tags/domain-config"}],title:"Hello World. Your First Vector Pipeline.",truncated:!1,nextItem:{title:"Structuring Your Log Data",permalink:"/guides/getting-started/structuring"}},p=[{value:"Tutorial",id:"tutorial",children:[{value:"Install Vector",id:"install-vector",children:[]},{value:"Configure it",id:"configure-it",children:[]},{value:"Hello World!",id:"hello-world",children:[]}]},{value:"Next Steps",id:"next-steps",children:[]}],u={rightToc:p};function m(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Vector is a simple beast to tame, in this guide we'll send an\n",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/about/data-model/"}),"event")," through it and touch on some basic concepts."),Object(a.b)("h2",{id:"tutorial"},"Tutorial"),Object(a.b)(s.a,{headingDepth:3,mdxType:"Steps"},Object(a.b)("ol",null,Object(a.b)("li",null,Object(a.b)("h3",{id:"install-vector"},"Install Vector"),Object(a.b)("p",null,"If you haven't already, install Vector. Here's a script for the lazy:"),Object(a.b)(c.a,{mdxType:"InstallationCommand"}),Object(a.b)("p",null,"Or ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/setup/installation/"}),"choose your preferred installation method"),".")),Object(a.b)("li",null,Object(a.b)("h3",{id:"configure-it"},"Configure it"),Object(a.b)("p",null,"Vector runs with a ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/setup/configuration/"}),"configuration file")," that tells it which\n",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"/components/"}),"components")," to run and how they should interact. Let's create\none that simply pipes a ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/reference/sources/stdin/"}),Object(a.b)("inlineCode",{parentName:"a"},"stdin")," source")," to a\n",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/reference/sinks/console/"}),Object(a.b)("inlineCode",{parentName:"a"},"console")," sink"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-toml",metastring:'title="vector.toml"',title:'"vector.toml"'}),'[sources.foo]\n  type = "stdin"\n\n[sinks.bar]\n  inputs = ["foo"]\n  type = "console"\n  encoding.codec = "text"\n')),Object(a.b)(l.a,{mdxType:"CodeExplanation"},Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"The ",Object(a.b)("a",Object(o.a)({parentName:"li"},{href:"/docs/reference/sources/stdin/"}),Object(a.b)("inlineCode",{parentName:"a"},"stdin")," source")," tells Vector to receive data over ",Object(a.b)("inlineCode",{parentName:"li"},"STDIN"),"."),Object(a.b)("li",{parentName:"ul"},"The ","[",Object(a.b)("inlineCode",{parentName:"li"},"console")," source]","docs.sinks.stdout] tells Vector to simply print the data to ",Object(a.b)("inlineCode",{parentName:"li"},"STDOUT"),"."),Object(a.b)("li",{parentName:"ul"},"The  ",Object(a.b)("inlineCode",{parentName:"li"},"encoding.codec")," tells Vector to print the data as plain text (unencoded)."))),Object(a.b)("p",null,"Every component within a Vector config has an identifier chosen by you. This\nallows you to specify where a sink should gather its data from (using the\n",Object(a.b)("inlineCode",{parentName:"p"},"inputs")," field).")),Object(a.b)("li",null,Object(a.b)("h3",{id:"hello-world"},"Hello World!"),Object(a.b)("p",null,"That's it for our first config, now pipe an event through it:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-bash"}),"echo 'Hello World!' | vector --config ./vector.toml\n")),Object(a.b)(l.a,{mdxType:"CodeExplanation"},Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"The ",Object(a.b)("inlineCode",{parentName:"li"},"echo")," statement sends a single log to Vector over ",Object(a.b)("inlineCode",{parentName:"li"},"STDIN")),Object(a.b)("li",{parentName:"ul"},"The ",Object(a.b)("inlineCode",{parentName:"li"},"vector...")," command starts Vector with our previously created config file."))),Object(a.b)("p",null,"Your input event will get echoed back (along with some service logs) unchanged:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-text"}),"... some logs ...\nHello World!\n")),Object(a.b)("p",null,"That's because the raw input text of our source was captured internally within\nthe field ",Object(a.b)("inlineCode",{parentName:"p"},"message"),", and the ",Object(a.b)("inlineCode",{parentName:"p"},"text")," ",Object(a.b)("inlineCode",{parentName:"p"},"encoding.codec")," option of our sink prints\nthe raw contents of ",Object(a.b)("inlineCode",{parentName:"p"},"message")," only."),Object(a.b)(r.a,{type:"info",mdxType:"Alert"},Object(a.b)("p",null,"Hey, kid, if you want to see something cool try setting ",Object(a.b)("inlineCode",{parentName:"p"},'encoding.codec = "json"'),"\nin the sink config."))))),Object(a.b)("h2",{id:"next-steps"},"Next Steps"),Object(a.b)("p",null,"If you expected something more interesting to happen then that's on you. The\ntext came out unchanged because we didn't ask Vector to change it, we can remedy\nthat by following the next guide in the series."))}m.isMDXComponent=!0}}]);