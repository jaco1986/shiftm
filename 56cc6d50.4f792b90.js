(window.webpackJsonp=window.webpackJsonp||[]).push([[344],{498:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return a})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return c}));var r=n(1),o=(n(0),n(1130));const i={last_modified_on:"2020-04-14",$schema:"/.meta/.schemas/highlights.json",title:"Improved Multiline Support In The File Source",description:"Merge multiple lines together based on rules",author_github:"https://github.com/binarylogic",pr_numbers:[1852],release:"0.8.0",hide_on_release_notes:!1,tags:["type: enhancement","domain: sources","source: file"]},a={date:"2020-02-21T00:00:00.000Z",description:"Merge multiple lines together based on rules",permalink:"/highlights/2020-02-21-file-source-multiline-support",readingTime:"1 min read",source:"@site/highlights/2020-02-21-file-source-multiline-support.md",tags:[{label:"type: enhancement",permalink:"/highlights/tags/type-enhancement"},{label:"domain: sources",permalink:"/highlights/tags/domain-sources"},{label:"source: file",permalink:"/highlights/tags/source-file"}],title:"Improved Multiline Support In The File Source",truncated:!1,prevItem:{title:"New Swimlanes Transform",permalink:"/highlights/2020-02-24-swimlanes-transform"},nextItem:{title:"Lots of New Sinks!",permalink:"/highlights/2020-02-20-new-sinks"}},s=[],l={rightToc:s};function c({components:e,...t}){return Object(o.b)("wrapper",Object(r.a)({},l,t,{components:e,mdxType:"MDXLayout"}),Object(o.b)("p",null,"One of the biggest frustrations we've heard from users in this space is the\ninability to merge lines together. Such a simple task can be incredibly\ncomplex and hard. Fear not! We plan to add first-class support for solving\nthis problem."),Object(o.b)("p",null,"In addition to the recently added ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/reference/sources/docker/#auto_partial_merge"}),"automatic merging of Docker\nlogs"),", we also added [better multiline\n",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/reference/sources/file/#multiline"}),"support")," to our ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/reference/sources/file/"}),Object(o.b)("inlineCode",{parentName:"a"},"file")," source"),".\nThese options are very expressive and should solve the vast majority of\nmultiline merging problems."),Object(o.b)("p",null,"For example. Given the following lines:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-text"}),"foobar.rb:6:in `/': divided by 0 (ZeroDivisionError)\n  from foobar.rb:6:in `bar'\n  from foobar.rb:2:in `foo'\n  from foobar.rb:9:in `<main>'\n")),Object(o.b)("p",null,"You can merge them with the following config:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-toml",metastring:'title="vector.toml"',title:'"vector.toml"'}),'[sources.my_file_source]\n  type = "file"\n  # ...\n\n  [sources.my_file_source.multiline]\n    start_pattern = "^[^\\\\s]"\n    mode = "continue_through"\n    condition_pattern = "^[\\\\s]+from"\n    timeout_ms = 1000\n')),Object(o.b)("p",null,"And if this doesn't do it, you can always fallback\nto our ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/reference/transforms/lua/"}),Object(o.b)("inlineCode",{parentName:"a"},"lua")," transform"),"."))}c.isMDXComponent=!0}}]);