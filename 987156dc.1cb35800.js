(window.webpackJsonp=window.webpackJsonp||[]).push([[584],{740:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return b}));var n=a(1),l=(a(0),a(1118));const i={title:"Field Path Notation",description:"Vector's field path notation allows you to reference field values with a simple string syntax."},c={id:"reference/field-path-notation",title:"Field Path Notation",description:"Vector's field path notation allows you to reference field values with a simple string syntax.",source:"@site/docs/reference/field-path-notation.md",permalink:"/docs/reference/field-path-notation"},s=[{value:"Example",id:"example",children:[]},{value:"Syntax",id:"syntax",children:[{value:"Root-level Values",id:"root-level-values",children:[]},{value:"Nested Values",id:"nested-values",children:[]},{value:"Array Values",id:"array-values",children:[]},{value:"Escaping",id:"escaping",children:[]}]}],r={rightToc:s};function b({components:e,...t}){return Object(l.b)("wrapper",Object(n.a)({},r,t,{components:e,mdxType:"MDXLayout"}),Object(l.b)("p",null,"Throughout Vector's configuration you'll notice that certain options take field\npaths as values, such as the\n",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/reference/transforms/rename_fields/"}),Object(l.b)("inlineCode",{parentName:"a"},"rename_fields")," transform"),". In order to\nreferenxe nested, or array, values you can use Vector's field path notation.\nThis notation is not anything special, it simply uses ",Object(l.b)("inlineCode",{parentName:"p"},".")," and ",Object(l.b)("inlineCode",{parentName:"p"},"[<index>]")," to\naccess nested and array values, respectively."),Object(l.b)("h2",{id:"example"},"Example"),Object(l.b)("p",null,"For this example let's use the following ",Object(l.b)("inlineCode",{parentName:"p"},"log")," event:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "timestamp": "2020-02-14T01:22:23.223Z",\n  "application_id": 1,\n  "message": "Hello world",\n  "field.with.dot": "value",\n  "ec2": {\n    "instance_id": "abcd1234",\n    "tags": ["tag1: value1", "tag2: value1"]\n  }\n}\n')),Object(l.b)("p",null,"We can access the values like so:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},'"application_id"')," - Accesses the root level ",Object(l.b)("inlineCode",{parentName:"li"},"application_id")," field."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},'"ec2.instance_id"')," - Accesses the child ",Object(l.b)("inlineCode",{parentName:"li"},"instance_id")," field."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},'"ec2.tags[0]"')," - Accesses the first value in the child ",Object(l.b)("inlineCode",{parentName:"li"},"tags")," field.")),Object(l.b)("h2",{id:"syntax"},"Syntax"),Object(l.b)("h3",{id:"root-level-values"},"Root-level Values"),Object(l.b)("p",null,"Root-level values can be access by simply supplying the name of the field as\nshown in the example above."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"field_name\n")),Object(l.b)("h3",{id:"nested-values"},"Nested Values"),Object(l.b)("p",null,"Nested values can be accessed by separating ancestor fields with the ",Object(l.b)("inlineCode",{parentName:"p"},"."),"\ncharacter:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"grandparent.parent.child\n")),Object(l.b)("h3",{id:"array-values"},"Array Values"),Object(l.b)("p",null,"Array values can be access with the ",Object(l.b)("inlineCode",{parentName:"p"},"[<index>]")," syntax:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"field_name[0]\n")),Object(l.b)("p",null,"Accesses the ",Object(l.b)("em",{parentName:"p"},"first")," value since it has an index of 0."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"parent.child[0]\n")),Object(l.b)("p",null,"Accesses the ",Object(l.b)("em",{parentName:"p"},"first")," value of the nested ",Object(l.b)("inlineCode",{parentName:"p"},"child")," field."),Object(l.b)("h3",{id:"escaping"},"Escaping"),Object(l.b)("p",null,"The special characters ",Object(l.b)("inlineCode",{parentName:"p"},"."),", ",Object(l.b)("inlineCode",{parentName:"p"},"["),", and ",Object(l.b)("inlineCode",{parentName:"p"},"]")," can be escaped with a ",Object(l.b)("inlineCode",{parentName:"p"},"\\"),":"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"field\\.with\\.dots\n")),Object(l.b)("p",null,"The above name will be treated literally."),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"\\")," character, if used literally, must be escaped with a ",Object(l.b)("inlineCode",{parentName:"p"},"\\")," as well."))}b.isMDXComponent=!0}}]);