(window.webpackJsonp=window.webpackJsonp||[]).push([[785],{944:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return m}));var a=n(1),o=n(9),r=(n(0),n(1128)),i=n(1172),l=n(1130),c={last_modified_on:"2020-05-14",title:"Configuration",description:"Configuring Vector"},s={id:"setup/configuration",title:"Configuration",description:"Configuring Vector",source:"@site/docs/setup/configuration.md",permalink:"/docs/setup/configuration",editUrl:"https://github.com/timberio/vector/edit/master/website/docs/setup/configuration.md",sidebar:"docs",previous:{title:"Install Vector From Source",permalink:"/docs/setup/installation/manual/from-source"},next:{title:"Deployment",permalink:"/docs/setup/deployment"}},b=[{value:"Example",id:"example",children:[]},{value:"Reference",id:"reference",children:[]},{value:"How It Works",id:"how-it-works",children:[{value:"Config File Location",id:"config-file-location",children:[]},{value:"Environment Variables",id:"environment-variables",children:[]},{value:"Multiple config files",id:"multiple-config-files",children:[]},{value:"Syntax",id:"syntax",children:[]},{value:"Templating",id:"templating",children:[]},{value:"Types",id:"types",children:[]}]}],p={rightToc:b};function m(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This section covers configuring Vector and creating pipelines like the\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#example"}),"example below"),". Vector's configuration uses the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/toml-lang/toml"}),"TOML"),"\nsyntax, and the configuration file must be passed via the\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/administration/process-management/#flags"}),Object(r.b)("inlineCode",{parentName:"a"},"--config")," flag")," when\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/administration/process-management/#starting"}),"starting")," Vector:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"vector --config /etc/vector/vector.toml\n")),Object(r.b)("h2",{id:"example"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-toml",metastring:'title="vector.toml"',title:'"vector.toml"'}),'# Set global options\ndata_dir = "/var/lib/vector"\n\n# Ingest data by tailing one or more files\n[sources.apache_logs]\n  type         = "file"\n  include      = ["/var/log/apache2/*.log"]    # supports globbing\n  ignore_older = 86400                         # 1 day\n\n# Structure and parse the data\n[transforms.apache_parser]\n  inputs       = ["apache_logs"]\n  type         = "regex_parser"                # fast/powerful regex\n  patterns      = [\'^(?P<host>[w.]+) - (?P<user>[w]+) (?P<bytes_in>[d]+) [(?P<timestamp>.*)] "(?P<method>[w]+) (?P<path>.*)" (?P<status>[d]+) (?P<bytes_out>[d]+)$\']\n\n# Sample the data to save on cost\n[transforms.apache_sampler]\n  inputs       = ["apache_parser"]\n  type         = "sampler"\n  rate         = 50                            # only keep 50%\n\n# Send structured data to a short-term storage\n[sinks.es_cluster]\n  inputs       = ["apache_sampler"]            # only take sampled data\n  type         = "elasticsearch"\n  host         = "http://79.12.221.222:9200"   # local or external host\n  index        = "vector-%Y-%m-%d"             # daily indices\n\n# Send structured data to a cost-effective long-term storage\n[sinks.s3_archives]\n  inputs       = ["apache_parser"]             # don\'t sample for S3\n  type         = "aws_s3"\n  region       = "us-east-1"\n  bucket       = "my-log-archives"\n  key_prefix   = "date=%Y-%m-%d"               # daily partitions, hive friendly format\n  compression  = "gzip"                        # compress final objects\n  encoding     = "ndjson"                      # new line delimited JSON\n  [sinks.s3_archives.batch]\n    max_size   = 10000000                      # 10mb uncompressed\n\n')),Object(r.b)("p",null,"The key thing to notice above is the use of the ",Object(r.b)("inlineCode",{parentName:"p"},"inputs")," option. This connects\nVector's component to create a pipeline. For a simple introduction, please\nrefer to the:"),Object(r.b)(l.a,{to:"/guides/getting-started/your-first-pipeline/",mdxType:"Jump"},"Getting Started Guide"),Object(r.b)("h2",{id:"reference"},"Reference"),Object(r.b)("p",null,"Vector provides a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/reference/"}),"full reference")," that you can use to build\nyour configuration files."),Object(r.b)(l.a,{to:"/docs/reference/sources/",mdxType:"Jump"},"Sources"),Object(r.b)(l.a,{to:"/docs/reference/transforms/",mdxType:"Jump"},"Transforms"),Object(r.b)(l.a,{to:"/docs/reference/sinks/",mdxType:"Jump"},"Sinks"),Object(r.b)("p",null,"And for more advanced techniques:"),Object(r.b)(l.a,{to:"/docs/reference/env-vars/",mdxType:"Jump"},"Env Vars"),Object(r.b)(l.a,{to:"/docs/reference/global-options/",mdxType:"Jump"},"Global options"),Object(r.b)(l.a,{to:"/docs/reference/templating/",mdxType:"Jump"},"Templating"),Object(r.b)(l.a,{to:"/docs/reference/tests/",mdxType:"Jump"},"Tests"),Object(r.b)("h2",{id:"how-it-works"},"How It Works"),Object(r.b)("h3",{id:"config-file-location"},"Config File Location"),Object(r.b)("p",null,"The location of your Vector configuration file depends on your ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/setup/installation/"}),"installation\nmethod"),". For most Linux based systems the file can be\nfound at ",Object(r.b)("inlineCode",{parentName:"p"},"/etc/vector/vector.toml"),"."),Object(r.b)("h3",{id:"environment-variables"},"Environment Variables"),Object(r.b)("p",null,"Vector will interpolate environment variables within your configuration file\nwith the following syntax:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-toml",metastring:'title="vector.toml"',title:'"vector.toml"'}),'[transforms.add_host]\n  type = "add_fields"\n\n  [transforms.add_host.fields]\n    host = "${HOSTNAME}"\n    environment = "${ENV:-development}" # default value when not present\n')),Object(r.b)(i.a,{type:"info",mdxType:"Alert"},Object(r.b)("p",null,"Interpolation is done before parsing the configuration file. As such, the\nentire ",Object(r.b)("inlineCode",{parentName:"p"},"${ENV_VAR}")," variable will be replaced, hence the requirement of\nquotes around the definition.")),Object(r.b)("p",null,"Please refer to the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/reference/env-vars/"}),"environment variables reference"),"\nfor more info."),Object(r.b)("h3",{id:"multiple-config-files"},"Multiple config files"),Object(r.b)("p",null,"You can pass multiple configuration files when starting Vector:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"vector --config vector1.toml --config vector2.toml\n")),Object(r.b)("p",null,"Or use a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Glob_(programming)"}),"globbing syntax"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"vector --config /etc/vector/*.toml\n")),Object(r.b)("h3",{id:"syntax"},"Syntax"),Object(r.b)("p",null,"The Vector configuration file follows the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/toml-lang/toml"}),"TOML")," syntax for it's\nsimplicity, explicitness, and relaxed white-space parsing. For more information,\nplease refer to the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/toml-lang/toml"}),"TOML documentation"),"."),Object(r.b)("h3",{id:"templating"},"Templating"),Object(r.b)("p",null,"Select configuration options support Vector's\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/reference/templating/"}),"templating syntax")," to produce dynamic values derived\nfrom the event's data. Two syntaxes are supported for fields that support field\ninterpolation:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.rs/chrono/0.4.11/chrono/format/strftime/index.html#specifiers"}),"Strptime specifiers"),". Ex: ",Object(r.b)("inlineCode",{parentName:"li"},"date=%Y/%m/%d")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/about/data-model/"}),"Event fields"),". Ex: ",Object(r.b)("inlineCode",{parentName:"li"},"{{ field_name }}"))),Object(r.b)("p",null,"For example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-toml",metastring:'title="vector.toml"',title:'"vector.toml"'}),'[sinks.es_cluster]\n  type  = "elasticsearch"\n  index = "user-{{ user_id }}-%Y-%m-%d"\n')),Object(r.b)("p",null,"The above ",Object(r.b)("inlineCode",{parentName:"p"},"index")," value will be calculated for ",Object(r.b)("em",{parentName:"p"},"each")," event. For example, given\nthe following event:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "timestamp": "2019-05-02T00:23:22Z",\n  "message": "message",\n  "user_id": 2\n}\n')),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"index")," value will result in:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-toml"}),'index = "user-2-2019-05-02"\n')),Object(r.b)("p",null,"Learn more in the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/reference/templating/"}),"templating reference"),"."),Object(r.b)("h3",{id:"types"},"Types"),Object(r.b)("p",null,"All TOML values types are supported. For convenience this includes:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/toml-lang/toml#string"}),"Strings")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/toml-lang/toml#integer"}),"Integers")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/toml-lang/toml#float"}),"Floats")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/toml-lang/toml#boolean"}),"Booleans")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/toml-lang/toml#offset-date-time"}),"Offset Date-Times")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/toml-lang/toml#local-date-time"}),"Local Date-Times")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/toml-lang/toml#local-date"}),"Local Dates")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/toml-lang/toml#local-time"}),"Local Times")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/toml-lang/toml#array"}),"Arrays")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/toml-lang/toml#table"}),"Tables"))))}m.isMDXComponent=!0}}]);