(window.webpackJsonp=window.webpackJsonp||[]).push([[234],{389:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(1),r=n(9),i=(n(0),n(1118)),o={last_modified_on:"2020-03-31",$schema:"/.meta/.schemas/highlights.json",title:"Unit Testing Your Vector Config Files",description:"Treating your Vector configuration files as code",author_github:"https://github.com/binarylogic",pr_numbers:[1220],release:"0.6.0",hide_on_release_notes:!1,tags:["type: new feature","domain: config"]},s={date:"2019-11-25T00:00:00.000Z",description:"Treating your Vector configuration files as code",permalink:"/highlights/2019-11-25-unit-testing-vector-config-files",readingTime:"3 min read",source:"@site/highlights/2019-11-25-unit-testing-vector-config-files.md",tags:[{label:"type: new feature",permalink:"/highlights/tags/type-new-feature"},{label:"domain: config",permalink:"/highlights/tags/domain-config"}],title:"Unit Testing Your Vector Config Files",truncated:!0,prevItem:{title:"The `datadog` sink has been renamed to `datadog_metrics`",permalink:"/highlights/2019-12-04-rename-datadog-sink-to-datadog_metrics"},nextItem:{title:"Windows Support Is Here!",permalink:"/highlights/2019-11-21-windows-support"}},c=[{value:"Example",id:"example",children:[]},{value:"Why?",id:"why",children:[]},{value:"Getting Started",id:"getting-started",children:[]},{value:"Feedback",id:"feedback",children:[]}],l={rightToc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Today we're excited to announce beta support for unit testing Vector\nconfigurations, allowing you to define tests directly within your Vector\nconfiguration file. These tests are used to assert the output from topologies of\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/reference/transforms/"}),"transform")," components given certain input events, ensuring\nthat your configuration behavior does not regress; a very powerful feature for\nmission-critical production pipelines that are collaborated on."),Object(i.b)("h2",{id:"example"},"Example"),Object(i.b)("p",null,"Let's look at a basic example that uses the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/reference/transforms/regex_parser/"}),Object(i.b)("inlineCode",{parentName:"a"},"regex_parser"),"\ntransform")," to parse log lines:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-toml",metastring:'title="vector.toml"',title:'"vector.toml"'}),'[sources.my_logs]\n  type    = "file"\n  include = ["/var/log/my-app.log"]\n\n[transforms.parser]\n  inputs = ["my_logs"]\n  type   = "regex_parser"\n  regex  = "^(?P<timestamp>[\\\\w\\\\-:\\\\+]+) (?P<level>\\\\w+) (?P<message>.*)$"\n\n[[tests]]\n  name = "verify_regex"\n\n  [tests.input]\n    insert_at = "parser"\n    type = "raw"\n    value = "2019-11-28T12:00:00+00:00 info Hello world"\n\n  [[tests.outputs]]\n    extract_from = "parser"\n\n    [[tests.outputs.conditions]]\n      type = "check_fields"\n      "timestamp.equals" = "2019-11-28T12:00:00+00:00"\n      "level.equals" = "info"\n      "message.equals" = "Hello world"\n')),Object(i.b)("p",null,"And you can run the tests via the new ",Object(i.b)("inlineCode",{parentName:"p"},"test")," subcommand:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"$ vector test ./vector.toml\nRunning ./vector.toml tests\nTest ./vector.toml: verify_regex ... passed\n")),Object(i.b)("h2",{id:"why"},"Why?"),Object(i.b)("p",null,"Many Vector configurations will be simple transformations across straight\nforward pipelines (such as ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/reference/sources/file/"}),"tailing a file")," and piping the\ndata to ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/reference/sinks/aws_cloudwatch_logs/"}),"AWS CloudWatch Logs"),") and don't really\nneed protection from regressions. However, Vector configs are capable of\nexpanding indefinitely with ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/reference/transforms/"}),"transforms")," in order to solve as\nmuch of your processing needs as possible."),Object(i.b)("p",null,"As a config grows, and as the number of owners of a config grow, the potential\nfor regressions also grows just like a regular codebase. The lack of testing\ncapabilities of configuration driven services is therefore a common pain for\nlarger organizations. We hope that natively supporting unit tests in Vector\nconfigs will preemptively solve this problem."),Object(i.b)("h2",{id:"getting-started"},"Getting Started"),Object(i.b)("p",null,"To help you get started we put together two documentation pages:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/guides/advanced/unit-testing/"}),"A unit testing guide")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/reference/tests/"}),"A reference of the unit testing config spec"))),Object(i.b)("p",null,"These should be everything you need and will be actively maintained as this\nfeature matures."),Object(i.b)("h2",{id:"feedback"},"Feedback"),Object(i.b)("p",null,"We're eager to hear your feedback! Unit testing, as a ",Object(i.b)("inlineCode",{parentName:"p"},"beta")," feature, is still\nin an early phase and we need case studies and comments in order to ensure it\nworks well for everyone. Please let us know what you think either in our\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://chat.vector.dev/"}),"community chat")," or by\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/timberio/vector/issues/new"}),"raising an issue"),"."))}p.isMDXComponent=!0}}]);